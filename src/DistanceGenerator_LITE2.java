
import dtx.Dtx;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import jplace.JplacerLoader;
import jplace.JplacerLoader.Placement;
import tree.PhyloNode;
import tree.PhyloTree;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ben
 */
public class DistanceGenerator_LITE2 {
    
    //workDir
    String HOME = System.getenv("HOME");
    File workDir=new File(HOME);

    //which component to score ?
    boolean doEPA=true;
    boolean doPPL=true;
    boolean doRAP=true;
    boolean doEPANG=true;
    boolean doAPPLES=true;
    
    public static void main(String[] args) {
        
        //System.setProperty("debug.verbose","1");

        ObjectInputStream ois=null;
        
        try {
            
            System.out.println("ARGS: workDir doEPA[1/0] doEPANG[0/1] doPPL[1/0] doRAP[0/1] doAPPLES[0,1]");

            //launch
            DistanceGenerator_LITE2 dg=new DistanceGenerator_LITE2();

            if(args.length>0) {
                dg.workDir=new File(args[0]);
                System.out.println("workDir: "+dg.workDir);
                if (Integer.parseInt(args[1])<1) { dg.doEPA=false; }
                if (Integer.parseInt(args[2])<1) { dg.doEPANG=false; }
                if (Integer.parseInt(args[3])<1) { dg.doPPL=false; }
                if (Integer.parseInt(args[4])<1) { dg.doRAP=false; }
                if (Integer.parseInt(args[5])<1) { dg.doAPPLES=false; }
            }

            //LOAD BINARY INFORMATION
            ////////////////////////////////////////////////////

            //expected placement
            File expPLaceFile=new File(dg.workDir+File.separator+"expected_placements.bin");
            //Dtx
            File DtxFile=new File(dg.workDir+File.separator+"Dtx.csv");

            //load the expected placement
            System.out.println("Loading "+expPLaceFile.getAbsolutePath());
            ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(expPLaceFile),4096));
            System.out.println("Loading NxIndex");
            HashMap<Integer,Integer> NxIndex = (HashMap<Integer,Integer>)ois.readObject();
            System.out.println("Loading pruningIndex");
            HashMap<Integer,Integer> pruningIndex = (HashMap<Integer,Integer>)ois.readObject();
            System.out.println("Loading expected placements");
            ArrayList<ArrayList<Integer>> expectedPlacements = (ArrayList<ArrayList<Integer>>)ois.readObject();
            System.out.println("Loading trees");
            ArrayList<PhyloTree> experimentTrees = (ArrayList<PhyloTree>)ois.readObject();
            System.out.println("Loading trees trifurcations");
            ArrayList<ArrayList<PhyloTree>> experimentTreesTrifurcations = (ArrayList<ArrayList<PhyloTree>>)ois.readObject();

            System.out.println("################################################");
            System.out.println("NxIndex="+NxIndex);
            System.out.println("pruningIndex="+NxIndex);
            System.out.println("expectedPlacements="+expectedPlacements);
            System.out.println("prunedTrees="+experimentTrees.size());
            for (int i = 0; i < experimentTrees.size(); i++) {
                PhyloTree get = experimentTrees.get(i);
                System.out.println(i+"th tree size test:"+get.getNodeCount());
            }
            System.out.println("################################################");
            //load Dtx
            System.out.println("Loading Dtx matrix...");
            Dtx Dtx=new Dtx(DtxFile);
            //System.out.println(Dtx);

            
            //LOAD ALL EXPERIMENTS FOUND IN WORK DIR
            ///////////////////////////////////////////////////

            //load list of all jplaces generated by the workflow
            List<Path> allJplaceFiles = new ArrayList<>();
            if (dg.doEPA) {
                System.out.println("Scanning for EPA jplace results...");
                File dir=new File(dg.workDir+File.separator+"EPA");
                List<Path> jplaceFiles = Files.find(dir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());
                System.out.println("# jplace found: "+jplaceFiles.size());
                allJplaceFiles.addAll(jplaceFiles);
            } 
            if (dg.doEPANG) {
                System.out.println("Scanning for EPANG jplace results...");
                File dir=new File(dg.workDir+File.separator+"EPANG");
                List<Path> jplaceFiles = Files.find(dir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());
                System.out.println("# jplace found: "+jplaceFiles.size());
                allJplaceFiles.addAll(jplaceFiles);
            }
            if (dg.doPPL) {
                System.out.println("Scanning for PPLACER jplace results...");
                File dir=new File(dg.workDir+File.separator+"PPLACER");
                List<Path> jplaceFiles = Files.find(dir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());
                System.out.println("# jplace found: "+jplaceFiles.size());
                allJplaceFiles.addAll(jplaceFiles);
            }
            if (dg.doRAP) {
                System.out.println("Scanning for RAPPAS jplace results...");
                File dir=new File(dg.workDir+File.separator+"RAPPAS");
                List<Path> jplaceFiles = Files.find(dir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());
                System.out.println("# jplace found: "+jplaceFiles.size());
                allJplaceFiles.addAll(jplaceFiles);
            }
            if (dg.doAPPLES) {
                System.out.println("Scanning for APPLES jplace results...");
                File dir=new File(dg.workDir+File.separator+"APPLES");
                List<Path> jplaceFiles = Files.find(dir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());
                System.out.println("# jplace found: "+jplaceFiles.size());
                allJplaceFiles.addAll(jplaceFiles);
            } 

            //////////////////////////////////////////////////////////
            // DEFINED LIST OF PARAMETERS TESTED IN WORKFLOW
            // BY REGISTERING PARAMETER/COLUMN INFORMATION

            LinkedHashMap<String,Integer> paramSet=new LinkedHashMap<>(32);
            int columnCounter=-1;

            //information common to all software
            //paramSet.put("file",++columnCounter);
            paramSet.put("software",++columnCounter);
            paramSet.put("pruning",++columnCounter);
            //paramSet.put("rname",++columnCounter);
            paramSet.put("rstart",++columnCounter);
            paramSet.put("rend",++columnCounter);
            paramSet.put("nd",++columnCounter);

            //pattern 
            //([0-9]+)_r([0-9]+)_([a-z]+)([0-9A-Z]+)_.*_([a-z]+)\.jplace
            //define from jplace filenames which parameters were tested
            final Pattern pat= Pattern.compile("([a-z]+)([0-9A-Z\\.]+)");
            for (Path p:allJplaceFiles) {
                String filename = p.toFile().getName();
                String[] infos = filename.split("_");
                //1st element is pruning id, last element is "software.jplace"
                for (int i = 1; i < infos.length - 1; i++) {
                    Matcher m = pat.matcher(infos[i]);
                    if (m.matches()) {
                        String param=m.group(1);
                        if (!paramSet.containsKey(param)) {
                            paramSet.put(m.group(1), ++columnCounter);
                        }
                    }
                }
            }
            //System.out.println("Param set: "+paramSet);
            
            
            //prepare a nice CSV file in which all data will be saved
            Path csvResult=Paths.get(dg.workDir.getAbsolutePath(),"results.csv");
            BufferedWriter bw= Files.newBufferedWriter(csvResult);
            //header
            int col=0;
            for (Iterator<String> it=paramSet.keySet().iterator();it.hasNext();) {
                String p=it.next();
                if (col>0) {
                    bw.append(";");
                }
                bw.append(p);
                col++;
            }
            bw.append("\n");


            
            // FOR EACH JPLACE, COMPUTE NODE DISTANCE
            /////////////////////////////////////////////////////


            //for each jplace file, calculate node dist
            for (int i = 0; i < allJplaceFiles.size(); i++) {
                Path currentJPlaceFile = allJplaceFiles.get(i);
                String jplaceLabel=currentJPlaceFile.getFileName().toString().split("\\.jplace$")[0];
                String[]elts=jplaceLabel.split("_");

                //information related to this placement
                int pruning=Integer.valueOf(elts[0]);
                String software=elts[elts.length-1];

                System.out.println("--------------------------------------");
                System.out.println("Parsing "+currentJPlaceFile.getFileName().toString());
                //System.out.println("software:"+software+" pruning:"+pruning);

                String[] infos=jplaceLabel.split("_");
                //System.out.println(Arrays.toString(infos));
                TreeMap<Integer,String> paramsValues=new TreeMap<>();
                for (int idx = 1; idx < infos.length-1; idx++) {
                    Matcher m=pat.matcher(infos[idx]);
                    if (m.matches()) {
                        String param=m.group(1);
                        if (paramSet.containsKey(param)) {
                            String val=m.group(2);
                            paramsValues.put(paramSet.get(param),val);
                        }
                    } else {
                        System.out.println("Error in jplace filename parameters coding, do not matches expected patter.");
                        System.exit(1);
                    }
                }
                //paramsValues.put(paramSet.get("file"),jplaceLabel);
                paramsValues.put(paramSet.get("pruning"),Integer.toString(pruning));
                paramsValues.put(paramSet.get("software"),software);

                //System.out.println(paramsValues);

                //load tree and expectedPlacements related to this pruning
                PhyloTree experimentTree=experimentTrees.get(pruning);
                experimentTree.initIndexes();
                ArrayList<Integer> experimentPlacements=expectedPlacements.get(pruning);

                //load jplace content
                JplacerLoader jpl=null;
                if (!software.equals("epang")) {
                    jpl=new JplacerLoader(currentJPlaceFile.toFile(), false);
                } else {
                    //was false with older versions of epang, but now seems to conserve root correctly
                    jpl=new JplacerLoader(currentJPlaceFile.toFile(), false);
                }


                if (jpl.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
                    jpl.getTree().displayTree();
                    experimentTree.displayTree();
                    System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
                    System.out.println("They do not include the same trees for the same Nx experiment.");
                    //return;
                    System.exit(1);
                }

                //version of EPA-ng prior to 0.3.4 unroots the input tree
                //this needs to be corrected, posterior versions, not need to correct

                if (jpl.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
                    System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
                    System.out.println("They do not include the same trees for the same Nx experiment.");
                    System.exit(1);
                }

                //map EPA jplace to experimentTree
                HashMap<Integer, Integer> mapNodes = jpl.getTree().mapNodes(experimentTree);
                //retrieve best placements
                HashMap<String, ArrayList<Placement>> EPABestPlacements = jpl.getPlacements();

                //iterate on placements
                for (Iterator<String> iterator = EPABestPlacements.keySet().iterator(); iterator.hasNext();) {
                    String name = iterator.next();
                    //get best placement as the nodeId of the phylotree generated
                    //during jplace parsing
                    Integer jplacePhyloTreeNodeId = EPABestPlacements.get(name).get(0).getNodeId();
                    //get its equivalent nodeId in the phylotree loaded from the
                    //expected_placements.bin
                    int experimentTreeNodeId = mapNodes.get(jplacePhyloTreeNodeId);
                    //calculate the distance between these 2 nodeIds
                    //i.e. use the DTx and D'Tx matrices

                    int nodeDistance = Dtx.getNodeDistance(pruningIndex.get(pruning), experimentTreeNodeId);

                    //got coordinates of placed read
                    String[] readInfos=name.split("_");
                    long readStart=0;
                    long readEnd=0;
                    try {
                        readStart=Long.decode(readInfos[readInfos.length-2]);
                    } catch (NumberFormatException ex) {
                        ex.printStackTrace();
                    }
                    try  {
                        readEnd=Long.decode(readInfos[readInfos.length-1]);
                    } catch (NumberFormatException ex) {
                        ex.printStackTrace();
                    }

                    //add information only in specific columns
                    //paramsValues.put(paramSet.get("rname"),name);
                    paramsValues.put(paramSet.get("rstart"),Long.toString(readStart));
                    paramsValues.put(paramSet.get("rend"),Long.toString(readEnd));
                    paramsValues.put(paramSet.get("nd"),Integer.toString(nodeDistance));

                    //System.out.println(paramsValues);

                    //now build output string
                    for (int column=0;column<paramSet.keySet().size();column++) {
                        if (column>0) {
                            bw.append(";");
                        }
                        if (paramsValues.containsKey(column)) {
                            bw.append(paramsValues.get(column));
                        }
                    }
                    bw.append("\n");
                }




            }

            bw.close();

            System.exit(0);

            ////////////////////////////////////////////////////////////////////////////////
            
            
            if (dg.doEPA) {
                System.out.println("##############");
                System.out.println("## EPA");
                File EPAxDir=new File(dg.workDir+File.separator+"EPA");
                //load EPA jplace results
                List<Path> EPAJPlaceFiles = Files.find(EPAxDir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());

                //for each jplace file, calculate node dist to expected placement
                for (int i = 0; i < EPAJPlaceFiles.size(); i++) {
                    Path currentJPlaceFile = EPAJPlaceFiles.get(i);
                    //SECOND element in filename in pplacer ex: RAxML_portableTree. R63_nx63_la1a.HCV_1_r200 .jplace
                    String jplaceLabel=currentJPlaceFile.getFileName().toString().split("\\.jplace$")[0]; 
                    String[]elts=jplaceLabel.split("_");
                    String readSize=elts[1].substring(1);
                    int pruning=Integer.valueOf(elts[0]);
                    System.out.println("--------------------------------------");
                    System.out.println("pruning:"+pruning+" read:"+readSize);

                    //load tree and expectedPlacements related to this Ax
                    PhyloTree experimentTree=experimentTrees.get(pruning);
                    experimentTree.initIndexes();
                    ArrayList<Integer> experimentPlacements=expectedPlacements.get(pruning);
                    //System.out.println("experimentTree nodeIds:"+experimentTree.getNodeIdsByDFS());
                    //System.out.println("experimentTree best placement(s):"+experimentPlacements);

                    
                    JplacerLoader EPAJplace=new JplacerLoader(currentJPlaceFile.toFile(), false);
                    
                    
                    if (EPAJplace.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
                        EPAJplace.getTree().displayTree();
                        experimentTree.displayTree();
                        System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
                        System.out.println("They do not include the same trees for the same Nx experiment.");
                        return;
                        //System.exit(1);
                    }


                    
                    //map EPA jplace to experimentTree
                    HashMap<Integer, Integer> mapEPANodes = EPAJplace.getTree().mapNodes(experimentTree);
                    //retrieve best placements
                    HashMap<String, ArrayList<Placement>> EPABestPlacements = EPAJplace.getPlacements();


                    //System.out.println("mapPPLNodes:"+mapPPLNodes);
                    //System.out.println("RAPBestPlacements:"+RAPBestPlacements);

                    for (Iterator<String> iterator = EPABestPlacements.keySet().iterator(); iterator.hasNext();) {
                        String name = iterator.next();
                        //get best placement as the nodeId of the phylotree generated 
                        //during jplace parsing
                        Integer jplacePhyloTreeNodeId = EPABestPlacements.get(name).get(0).getNodeId();
                        //get its equivalent nodeId in the phylotree loaded from the 
                        //expected_placements.bin
                        int experimentTreeNodeId = mapEPANodes.get(jplacePhyloTreeNodeId);
                        //System.out.println("experimentTreeNodeId: "+experimentTreeNodeId);
                        //calculate the distance between these 2 nodeIds
                        //i.e. use the DTx and D'Tx matrices
                        //System.out.println("expected:"+expectedPlacements.get(pruning));
                        
                        int nodeDistance = Dtx.getNodeDistance(pruningIndex.get(pruning), experimentTreeNodeId);
                        
                        //got coordinates of placed read
                        String[] readInfos=name.split("_");
                        long readStart=0;
                        long readEnd=0;
                        try {
                            readStart=Long.decode(readInfos[readInfos.length-2]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }
                        try  {
                            readEnd=Long.decode(readInfos[readInfos.length-1]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }

                        //software;Ax;k;omega;Rx;read;node_dist
                        bw.append("EPA;"+pruning+";;;"+name+";"+readSize+";"+nodeDistance+";"+readStart+";"+readEnd+"\n");
                    }

                }
                bw.flush();
            }    
            
            if (dg.doEPANG) {
                System.out.println("##############");
                System.out.println("## EPA-ng");
                File EPANGxDir=new File(dg.workDir+File.separator+"EPANG");
                //load EPA jplace results
                List<Path> EPANGJPlaceFiles = Files.find(EPANGxDir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());

                //for each jplace file, calculate node dist to expected placement
                for (int i = 0; i < EPANGJPlaceFiles.size(); i++) {
                    Path currentJPlaceFile = EPANGJPlaceFiles.get(i);
                    //FIRST  element in filename in epa-ng ex: R0_nx3_la95_r150. aln. fasta_queries_epa_result. jplace
                    String jplaceLabel=currentJPlaceFile.getFileName().toString().split("\\.jplace$")[0]; 
                    String[]elts=jplaceLabel.split("_");
                    String readSize=elts[1].substring(1);
                    int pruning=Integer.valueOf(elts[0]);
                    System.out.println("--------------------------------------");
                    System.out.println("pruning:"+pruning+" read:"+readSize);

                    //load tree and expectedPlacements related to this Ax
                    PhyloTree experimentTree=experimentTrees.get(pruning);
                    experimentTree.initIndexes();
                    ArrayList<Integer> experimentPlacements=expectedPlacements.get(pruning);
                    //System.out.println("experimentTree nodeIds:"+experimentTree.getNodeIdsByDFS());
                    //System.out.println("experimentTree best placement(s):"+expectedPlacementNodeIds);

                    
                    JplacerLoader EPANGJplace=new JplacerLoader(currentJPlaceFile.toFile(), false);

                    //version of EPA-ng prior to 0.3.4 unroots the input tree
                    //this needs to be corrected, posterior versions, not need to correct                    
                    
                    if (EPANGJplace.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
                        System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
                        System.out.println("They do not include the same trees for the same Nx experiment.");
                        System.exit(1);
                    }
                    
                    //map EPA jplace to experimentTree
                    HashMap<Integer, Integer> mapEPANGNodes = EPANGJplace.getTree().mapNodes(experimentTree);
                    //retrieve best placements
                    HashMap<String, ArrayList<Placement>> EPANGBestPlacements = EPANGJplace.getPlacements();


                    //System.out.println("mapPPLNodes:"+mapPPLNodes);
                    //System.out.println("RAPBestPlacements:"+RAPBestPlacements);

                    for (Iterator<String> iterator = EPANGBestPlacements.keySet().iterator(); iterator.hasNext();) {
                        String name = iterator.next();
                        //get best placement as the nodeId of the phylotree generated 
                        //during jplace parsing
                        Integer jplacePhyloTreeNodeId = EPANGBestPlacements.get(name).get(0).getNodeId();
                        //get its equivalent nodeId in the phylotree loaded from the 
                        //expected_placements.bin
                        Integer experimentTreeNodeId = mapEPANGNodes.get(jplacePhyloTreeNodeId);
                        //calculate the distance between these 2 nodeIds
                        //i.e. use the DTx and D'Tx matrices
                        int nodeDistance = Dtx.getNodeDistance(pruningIndex.get(pruning), experimentTreeNodeId);
                        
                        //got coordinates of placed read
                        String[] readInfos=name.split("_");
                        long readStart=0;
                        long readEnd=0;
                        try {
                            readStart=Long.decode(readInfos[readInfos.length-2]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }
                        try  {
                            readEnd=Long.decode(readInfos[readInfos.length-1]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }

                        //software;Ax;k;omega;Rx;read;node_dist
                        bw.append("EPA-ng;"+pruning+";;;"+name+";"+readSize+";"+nodeDistance+";"+readStart+";"+readEnd+"\n");
                    }

                }
                bw.flush();
            }    
            
            
            if (dg.doPPL) {
                
                System.out.println("##############");
                System.out.println("## PPL");
                File PPLxDir=new File(dg.workDir+File.separator+"PPLACER");
                //load EPA jplace results
                List<Path> PPLJPlaceFiles = Files.find(PPLxDir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());

                //for each jplace file, calculate node dist to expected placement
                for (int i = 0; i < PPLJPlaceFiles.size(); i++) {
                    Path currentJPlaceFile = PPLJPlaceFiles.get(i);
                    String jplaceLabel=currentJPlaceFile.getFileName().toString().split("\\.jplace$")[0]; 
                    String[]elts=jplaceLabel.split("_");
                    String readSize=elts[1].substring(1);
                    int pruning=Integer.valueOf(elts[0]);
                    System.out.println("--------------------------------------");
                    System.out.println("pruning:"+pruning+" read:"+readSize);

                    //load tree and expectedPlacements related to this Ax
                    PhyloTree experimentTree=experimentTrees.get(pruning);
                    ArrayList<Integer> expectedPlacementNodeIds=expectedPlacements.get(pruning);
                    //System.out.println("experimentTree nodeIds:"+experimentTree.getNodeIdsByDFS());
                    //System.out.println("experimentTree best placement(s):"+expectedPlacementNodeIds);

                    JplacerLoader PPLJplace=new JplacerLoader(currentJPlaceFile.toFile(), false);
                    //System.out.println("PPLJplace tree: "+PPLJplace.getTree());
                    //System.out.println("experimentTree: "+experimentTree);
                    if (PPLJplace.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
                        System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
                        System.out.println("They do not include the same trees for the same Nx experiment.");
                        System.exit(1);
                    }
                    
                    //map EPA jplace to experimentTree
                    HashMap<Integer, Integer> mapPPLNodes = PPLJplace.getTree().mapNodes(experimentTree);
                    //retrieve best placements
                    HashMap<String, ArrayList<Placement>> EPABestPlacements = PPLJplace.getPlacements();


                    //System.out.println("mapPPLNodes:"+mapPPLNodes);
                    //System.out.println("RAPBestPlacements:"+RAPBestPlacements);

                    for (Iterator<String> iterator = EPABestPlacements.keySet().iterator(); iterator.hasNext();) {
                        //query itself
                        String name = iterator.next();
                        //get best placement as the nodeId of the phylotree generated 
                        //during jplace parsing
                        Integer jplacePhyloTreeNodeId = EPABestPlacements.get(name).get(0).getNodeId();
                        //get its equivalent nodeId in the phylotree loaded from the 
                        //expected_placements.bin
                        Integer experimentTreeNodeId = mapPPLNodes.get(jplacePhyloTreeNodeId);
                        //calculate the distance between these 2 nodeIds
                        //i.e. use the DTx and D'Tx matrices

                        //TODO: add the Nx ids in the expected placement binary
                        
                        //got coordinates of placed read
                        String[] readInfos=name.split("_");
                        long readStart=0;
                        long readEnd=0;
                        try {
                            readStart=Long.decode(readInfos[readInfos.length-2]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }
                        try  {
                            readEnd=Long.decode(readInfos[readInfos.length-1]);
                        } catch (NumberFormatException ex) {
                            ex.printStackTrace();
                        }

                        int nodeDistance = Dtx.getNodeDistance(pruningIndex.get(pruning), experimentTreeNodeId);

                        //software;Ax;k;omega;Rx;read;node_dist
                        bw.append("PPL;"+pruning+";;;"+name+";"+readSize+";"+nodeDistance+";"+readStart+";"+readEnd+"\n");
                    }

                }
                bw.flush();
            }
            
            if (dg.doRAP) {

            
                System.out.println("##############");
                System.out.println("## RAP");
                File DxDir=new File(dg.workDir+File.separator+"RAPPAS");
                //load EPA jplace results
                ArrayList<File> RAPResults=new ArrayList<>();
                List<Path> RAPPJPlaceFiles = Files.find(DxDir.toPath(), 999, (p,b)-> b.isRegularFile() && p.getFileName().toString().endsWith(".jplace")).collect(Collectors.toList());

                //for each jplace file, calculate node dist to expected placement
                for (int i = 0; i < RAPPJPlaceFiles.size(); i++) {
                    Path currentJPlaceFile = RAPPJPlaceFiles.get(i);
                    System.out.println(currentJPlaceFile.toAbsolutePath());
                    //not related to trifurcations
                    buildRAPPASNodeDistances(false, currentJPlaceFile,Dtx,NxIndex,expectedPlacements,experimentTrees,bw,pruningIndex);
                } 
            
            }
            
            bw.close();
            
            System.out.println("DONE");
            
            System.exit(0);
            
            
        
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DistanceGenerator_LITE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(DistanceGenerator_LITE.class.getName()).log(Level.SEVERE, null, ex);
        } 

        
        
        
    }
    
    
    public static void testPosteriorDFS(PhyloNode n) {
        Enumeration children = n.children();
        while (children.hasMoreElements()) {
            PhyloNode nextElement = (PhyloNode)children.nextElement();
            testPosteriorDFS(nextElement);
        }
        System.out.println(n);

    }
    
    public static void testAnteriorDFS(PhyloNode n) {
        System.out.println(n);
        Enumeration children = n.children();
        while (children.hasMoreElements()) {
            PhyloNode nextElement = (PhyloNode)children.nextElement();
            testPosteriorDFS(nextElement);
        }
    }
    
    /**
     * operations related to RAPPAS jplace parsing, node distance, 
     * and comparisons to EPA / PPlacer
     * @param currentJPlaceFile
     * @param Dtx
     * @param NxIndex
     * @param expectedPlacementsNodeIds
     * @param experimentTrees
     * @param bw
     * @throws IOException 
     */
    private static void buildRAPPASNodeDistances(  
                                            boolean trifurcations,
                                            Path currentJPlaceFile, 
                                            Dtx Dtx, 
                                            HashMap<Integer,Integer> NxIndex,
                                            ArrayList<ArrayList<Integer>> expectedPlacementsNodeIds,
                                            ArrayList<PhyloTree> experimentTrees,
                                            BufferedWriter bw,
                                            HashMap<Integer,Integer> pruningIndex
            
                                            ) throws IOException {
        
        String jplaceLabel=currentJPlaceFile.getFileName().toString(); //2 times get parent  Ax_nxx_xxx/kx_ax/logs/jplace
        System.out.print("jplaceLabel:"+jplaceLabel);
        String[] data =currentJPlaceFile.toFile().getName().split("_");
        
        //k and omega
        int k=Integer.parseInt(data[2].substring(1));
        float omega=Float.parseFloat(data[3].substring(1));
        //experiment
        int pruning=Integer.parseInt(data[0]);
        String readSize=data[1].substring(1);
        //elements in filename in rappas ex: placements_ R3_nx3_la_r900.fasta_medium .jplace
        String infos=currentJPlaceFile.getFileName().toString().split("\\.jplace$")[0].substring(11);  //11, to remove prefix "placements_"
        String readLabel=infos.split("\\.")[0];
        System.out.println("pruning: "+pruning);
        System.out.println("readSize: "+readSize);
        System.out.println("k: "+k);
        System.out.println("omega: "+omega);


        //pruning infos

        //load tree and expectedPlacements related to this Ax
        PhyloTree experimentTree=experimentTrees.get(pruning);
        
        ArrayList<Integer> expectedPlacementNodeIds=expectedPlacementsNodeIds.get(pruning);
        //System.out.println("experimentTree nodeIds:"+experimentTree.getNodeIdsByDFS());
        //System.out.println("experimentTree best placement(s):"+expectedPlacementNodeIds);
        JplacerLoader RAPJplace=new JplacerLoader(currentJPlaceFile.toFile(), false);
        //System.out.println("RAPJplace tree: "+RAPJplace.getTree());
        //System.out.println("experimentTree: "+experimentTree);
        if (RAPJplace.getTree().getNodeCount()!=experimentTree.getNodeCount()) {
            System.out.println("Something is wrong between the JPlace and expected_placements.bin trees.");
            System.out.println("They do not include the same trees for the same Nx experiment.");
            System.exit(1);
        }

        //map jplace to experimentTree map(jplace nodeId)=experiment tree node id
        HashMap<Integer, Integer> mapRAPNodes = RAPJplace.getTree().mapNodes(experimentTree);
        //System.out.println("mapPPLNodes:"+mapPPLNodes);

        //retrieve best placements
        HashMap<String, ArrayList<Placement>> RAPBestPlacements = RAPJplace.getPlacements();
        //System.out.println("RAPBestPlacements:"+RAPBestPlacements);

        //for each placement (json item 'p' in the jplace)
        for (Iterator<String> iterator = RAPBestPlacements.keySet().iterator(); iterator.hasNext();) {
            String name = iterator.next();
            //get best placement as the nodeId of the phylotree generated 
            //during jplace parsing
            Integer jplacePhyloTreeNodeId = RAPBestPlacements.get(name).get(0).getNodeId();
            //verify if following placements are not same value
            if (RAPBestPlacements.get(name).size()>1) {
                if (RAPBestPlacements.get(name).get(1).getWeightRatio()==RAPBestPlacements.get(name).get(0).getWeightRatio()) {
                    System.out.println("!!!!!!!!!!!!!!  Identical weight ratios !");
                    System.out.println("Read: "+name);
                    System.out.println("File: "+currentJPlaceFile.toFile().getAbsolutePath());
                    //System.exit(1);
                }
            }

            //get its equivalent nodeId in the phylotree loaded from the 
            //expected_placements.bin
            Integer observedExperimentNodeId = mapRAPNodes.get(jplacePhyloTreeNodeId);
            //calculate the distance between these 2 nodeIds
            //i.e. use the DTx and D'Tx matrices
            //TODO: add the Nx ids in the expected placement binary

            int nodeDistance = Dtx.getNodeDistance(pruningIndex.get(pruning), observedExperimentNodeId);

        

            //got coordinates of placed read
            String[] readInfos=name.split("_");
            long readStart=0;
            long readEnd=0;
            try {
                readStart=Long.decode(readInfos[readInfos.length-2]);
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
            }
            try  {
                readEnd=Long.decode(readInfos[readInfos.length-1]);
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
            }


            //System.out.println(name+" -> nodeDistance:"+nodeDistance);
            //software;Ax;k;omega;Rx;read;node_dist
            bw.append("RAP;"+pruning+";"+k+";"+omega+";"+name+";"+readSize+";"+nodeDistance+";"+readStart+";"+readEnd+"\n");



        }

        
    }
    
    
}
